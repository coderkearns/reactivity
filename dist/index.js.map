{
  "version": 3,
  "sources": ["../lib/subscription.js", "../lib/array.js", "../lib/object.js", "../lib/shared.js", "../lib/value.js"],
  "sourcesContent": ["export default class Subscription {\n    constructor() {\n        this._subscribers = []\n    }\n\n    subscribe(subscriber) {\n        this._subscribers.push(subscriber)\n    }\n\n    publish(...values) {\n        for (let subscriber of this._subscribers) {\n            subscriber(...values)\n        }\n    }\n}\n\nexport function factory() {\n    return new Subscriber()\n}\n", "import Subscription from \"./subscription\";\nimport { makeSubscription } from \"./shared\";\n\nexport default class ReactiveArray extends Subscription {\n    constructor(initialArray = []) {\n        super()\n\n        this._internal = []\n\n        for (const value of initialArray) {\n            this.push(value)\n        }\n    }\n\n    _makeSubscriberFunc(key) {\n        return (value, oldKey = null) => {\n            this.publish(value, oldKey ? `${key}.${oldKey}` : `${key}`)\n        }\n    }\n\n    _makeAndSubscribe(value, key) {\n        const item = makeSubscription(value)\n        item.subscribe(this._makeSubscriberFunc(key))\n        return item\n    }\n\n    static() {\n        return this._internal.map(item => item.static())\n    }\n\n    /* Array methods */\n    push(value) {\n        const key = this._internal.length\n        const item = this._makeAndSubscribe(item, key)\n        this._internal.push(item)\n        this.publish(value, `${key}`)\n    }\n}\n\nexport function factory(initialArray) {\n    return new ReactiveArray(initialArray)\n}\n", "import Subscription from \"./subscription\";\nimport { makeSubscription } from \"./shared\";\n\nexport default class ReactiveObject extends Subscription {\n    constructor(initialObject = {}) {\n        super()\n\n        this._internal = {}\n\n        for (const key in initialObject) {\n            this.set(key, initialObject[key])\n        }\n    }\n\n    _makeSubscriberFunc(key) {\n        return (value, oldKey = null) => {\n            this.publish(value, oldKey ? `${key}.${oldKey}` : key)\n        }\n    }\n\n    _makeAndSubscribe(value, key) {\n        const item = makeSubscription(value)\n        item.subscribe(this._makeSubscriberFunc(key))\n        return item\n    }\n\n    static() {\n        const _static = {}\n        for (const key in this._internal) {\n            _static[key] = this._internal[key].static()\n        }\n    }\n\n    /* Object methods */\n    set(key, value) {\n        if (this._internal[key] !== undefined) {\n            this._internal[key].set(value)\n        } else {\n            const item = this._makeAndSubscribe(value, key)\n            this._internal[key] = item\n            this.publish(value, key)\n        }\n    }\n\n    get(key) {\n        return this._internal[key]\n    }\n}\n\nexport function factory(initialObject) {\n    return new ReactiveObject(initialObject)\n}\n", "import ReactiveValue from \"./value\"\nimport ReactiveArray from \"./array\"\nimport ReactiveObject from \"./object\"\n\nexport function makeSubscription(item) {\n    if (typeof item === \"object\") {\n        if (Array.isArray(item)) {\n            return new ReactiveArray(item)\n        } else {\n            return new ReactiveObject(item)\n        }\n    }\n\n    return new ReactiveValue(item)\n}\n", "import Subscription from \"./subscription\";\nimport { makeSubscription } from \"./shared\";\n\nexport default class ReactiveValue extends Subscription {\n    constructor(initialValue) {\n        super()\n        this._value = initialValue\n    }\n\n    get() {\n        return this._value\n    }\n\n    set(value) {\n        this._value = value\n        this.publish(this._value)\n    }\n\n    static() {\n        return this._value\n    }\n}\n\nexport function factory(initialValue) {\n    return new ReactiveValue(initialValue)\n}\n"],
  "mappings": "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",
  "names": ["Subscription", "subscriber", "values", "factory", "ReactiveArray", "Subscription", "initialArray", "value", "key", "oldKey", "item", "makeSubscription", "factory", "ReactiveObject", "Subscription", "initialObject", "key", "value", "oldKey", "item", "makeSubscription", "_static", "factory", "makeSubscription", "item", "ReactiveArray", "ReactiveObject", "ReactiveValue", "ReactiveValue", "Subscription", "initialValue", "value", "factory"]
}
