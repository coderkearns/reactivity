{
  "version": 3,
  "sources": ["../esm/index.js", "../esm/core.js"],
  "sourcesContent": ["export * from \"./core\";\n", "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Returns true if the given value is a reactive object (ReactiveValue, ReactiveArray, or ReactiveObject).\n */\nexport function isReactive(item) {\n    return typeof item === 'object' && typeof item.$subscribe === 'function' && typeof item.get === 'function';\n}\n/**\n * Converts a simple item (object, array, or other value) to its reactive representation.\n * If the item is already reactive, it is returned unchanged.\n */\nexport function createReactive(item) {\n    if (isReactive(item)) {\n        return item;\n    }\n    if (typeof item === \"object\") {\n        if (Array.isArray(item)) {\n            return ReactiveArray(item);\n        }\n        else if (item !== null) {\n            return ReactiveObject(item);\n        }\n    }\n    return ReactiveValue(item);\n}\n/**\n * A simple subscription object, with no automatic binding done.\n */\nexport function Subscription() {\n    var subscribers = [];\n    return {\n        $subscribe: function (subscriber) {\n            subscribers.push(subscriber);\n        },\n        $publish: function (value) {\n            subscribers.forEach(function (subscriber) { return subscriber(value); });\n        }\n    };\n}\n/**\n * A subscriptable value - like a variable with a subscription attached.\n * @example\n * const value = new ReactiveValue(10)\n * value.$subscribe(console.log)\n * value.get() // => 10\n * value.set(20) // logs 20\n * value.get() // => 20\n */\nexport function ReactiveValue(initialValue) {\n    var _subscription = Subscription();\n    var _value = initialValue;\n    return {\n        $subscribe: _subscription.$subscribe,\n        get: function () {\n            return _value;\n        },\n        set: function (newValue) {\n            _value = newValue;\n            _subscription.$publish(newValue);\n        }\n    };\n}\n/**\n * A subscriptable array.\n * Acts as a proxy to a real array, but also holds a subscription.\n * @example\n * const array = new ReactiveArray([\"a\"])\n * array.$subscribe(console.log)\n * array.get(0) // => \"a\"\n * array.push(\"b\") // logs [1, \"b\"]\n * array.pop() // logs [-1, \"b\"]\n * array.pop() // logs [-1, \"a\"]\n * array.pop() // logs [-1, undefined]\n */\nexport function ReactiveArray(initialValue) {\n    var _subscription = Subscription();\n    var _value = __spreadArray([], initialValue, true);\n    return {\n        $subscribe: _subscription.$subscribe,\n        get: function (index) {\n            return _value[index];\n        },\n        set: function (index, value) {\n            _value[index] = value;\n            _subscription.$publish([index, value]);\n        },\n        push: function (value) {\n            _value.push(value);\n            _subscription.$publish([_value.length - 1, value]);\n        },\n        pop: function () {\n            var ret = _value.pop();\n            _subscription.$publish([-1, ret]);\n            return ret;\n        }\n    };\n}\n/**\n * A subscriptable object.\n * Acts as a proxy to a real object, but also holds a subscription.\n * @example\n * const object = new ReactiveObject({a: 1, b: 2, c: [1, 2, 3]})\n * object.$subscribe(console.log)\n * object.get(\"a\") // => 1\n * object.set(\"b\", 3) // logs [\"b\", 3]\n * object.mutate(\"c\", (arr) => arr.push(4)) // logs [\"c\", [1, 2, 3, 4]]\n */\nexport function ReactiveObject(initialValue) {\n    var _subscription = Subscription();\n    var _value = initialValue;\n    return {\n        $subscribe: _subscription.$subscribe,\n        get: function (key) {\n            return _value[key];\n        },\n        set: function (key, value) {\n            _value[key] = value;\n            _subscription.$publish([key, value]);\n        },\n        mutate: function (key, updater) {\n            updater(_value[key]);\n            _subscription.$publish([key, _value[key]]);\n        }\n    };\n}\n// TODO: new type \"Store\", which is like a ReactiveObject but instead all of its properties are reactive, and their properties are also reactive, etc.\n"],
  "mappings": "8bAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,mBAAAC,EAAA,kBAAAC,EAAA,iBAAAC,EAAA,mBAAAC,EAAA,eAAAC,ICAA,IAAIC,EAAgD,SAAUC,EAAIC,EAAMC,EAAM,CAC1E,GAAIA,GAAQ,UAAU,SAAW,EAAG,QAASC,EAAI,EAAGC,EAAIH,EAAK,OAAQI,EAAIF,EAAIC,EAAGD,KACxEE,GAAM,EAAEF,KAAKF,MACRI,IAAIA,EAAK,MAAM,UAAU,MAAM,KAAKJ,EAAM,EAAGE,CAAC,GACnDE,EAAGF,CAAC,EAAIF,EAAKE,CAAC,GAGtB,OAAOH,EAAG,OAAOK,GAAM,MAAM,UAAU,MAAM,KAAKJ,CAAI,CAAC,CAC3D,EAIO,SAASK,EAAWC,EAAM,CAC7B,OAAO,OAAOA,GAAS,UAAY,OAAOA,EAAK,YAAe,YAAc,OAAOA,EAAK,KAAQ,UACpG,CAKO,SAASC,EAAeD,EAAM,CACjC,GAAID,EAAWC,CAAI,EACf,OAAOA,EAEX,GAAI,OAAOA,GAAS,SAAU,CAC1B,GAAI,MAAM,QAAQA,CAAI,EAClB,OAAOE,EAAcF,CAAI,EAExB,GAAIA,IAAS,KACd,OAAOG,EAAeH,CAAI,EAGlC,OAAOI,EAAcJ,CAAI,CAC7B,CAIO,SAASK,GAAe,CAC3B,IAAIC,EAAc,CAAC,EACnB,MAAO,CACH,WAAY,SAAUC,EAAY,CAC9BD,EAAY,KAAKC,CAAU,CAC/B,EACA,SAAU,SAAUC,EAAO,CACvBF,EAAY,QAAQ,SAAUC,EAAY,CAAE,OAAOA,EAAWC,CAAK,CAAG,CAAC,CAC3E,CACJ,CACJ,CAUO,SAASJ,EAAcK,EAAc,CACxC,IAAIC,EAAgBL,EAAa,EAC7BM,EAASF,EACb,MAAO,CACH,WAAYC,EAAc,WAC1B,IAAK,UAAY,CACb,OAAOC,CACX,EACA,IAAK,SAAUC,EAAU,CACrBD,EAASC,EACTF,EAAc,SAASE,CAAQ,CACnC,CACJ,CACJ,CAaO,SAASV,EAAcO,EAAc,CACxC,IAAIC,EAAgBL,EAAa,EAC7BM,EAASnB,EAAc,CAAC,EAAGiB,EAAc,EAAI,EACjD,MAAO,CACH,WAAYC,EAAc,WAC1B,IAAK,SAAUG,EAAO,CAClB,OAAOF,EAAOE,CAAK,CACvB,EACA,IAAK,SAAUA,EAAOL,EAAO,CACzBG,EAAOE,CAAK,EAAIL,EAChBE,EAAc,SAAS,CAACG,EAAOL,CAAK,CAAC,CACzC,EACA,KAAM,SAAUA,EAAO,CACnBG,EAAO,KAAKH,CAAK,EACjBE,EAAc,SAAS,CAACC,EAAO,OAAS,EAAGH,CAAK,CAAC,CACrD,EACA,IAAK,UAAY,CACb,IAAIM,EAAMH,EAAO,IAAI,EACrB,OAAAD,EAAc,SAAS,CAAC,GAAII,CAAG,CAAC,EACzBA,CACX,CACJ,CACJ,CAWO,SAASX,EAAeM,EAAc,CACzC,IAAIC,EAAgBL,EAAa,EAC7BM,EAASF,EACb,MAAO,CACH,WAAYC,EAAc,WAC1B,IAAK,SAAUK,EAAK,CAChB,OAAOJ,EAAOI,CAAG,CACrB,EACA,IAAK,SAAUA,EAAKP,EAAO,CACvBG,EAAOI,CAAG,EAAIP,EACdE,EAAc,SAAS,CAACK,EAAKP,CAAK,CAAC,CACvC,EACA,OAAQ,SAAUO,EAAKC,EAAS,CAC5BA,EAAQL,EAAOI,CAAG,CAAC,EACnBL,EAAc,SAAS,CAACK,EAAKJ,EAAOI,CAAG,CAAC,CAAC,CAC7C,CACJ,CACJ",
  "names": ["esm_exports", "__export", "ReactiveArray", "ReactiveObject", "ReactiveValue", "Subscription", "createReactive", "isReactive", "__spreadArray", "to", "from", "pack", "i", "l", "ar", "isReactive", "item", "createReactive", "ReactiveArray", "ReactiveObject", "ReactiveValue", "Subscription", "subscribers", "subscriber", "value", "initialValue", "_subscription", "_value", "newValue", "index", "ret", "key", "updater"]
}
